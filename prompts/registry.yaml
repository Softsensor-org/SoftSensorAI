# Prompt Registry - Quick Pattern Reference
# Use: pattern_selector.sh <pattern-name> or reference directly

patterns:
  # Discovery & Planning
  discovery-scope:
    description: "Clarify vague ticket into crisp spec"
    when: "Ticket unclear, need acceptance criteria"
    file: ".claude/commands/patterns/discovery-scope.md"
    tags: ["planning", "discovery", "spec"]
  
  arch-spike:
    description: "Evaluate 2-3 architecture options"
    when: "New feature boundary, system design needed"
    file: ".claude/commands/patterns/arch-spike.md"
    tags: ["architecture", "design", "planning"]

  # Backend Development
  backend-feature:
    description: "Implement backend feature with tests"
    when: "Ready to code, have clear requirements"
    file: ".claude/commands/patterns/backend-feature.md"
    tags: ["backend", "feature", "implementation"]
  
  bug-fix:
    description: "Fix bug with test-first approach"
    when: "Defect reported, need regression prevention"
    file: ".claude/commands/patterns/bug-fix.md"
    tags: ["bug", "fix", "testing"]
  
  safe-refactor:
    description: "Refactor without changing behavior"
    when: "Code needs cleanup, maintain functionality"
    file: ".claude/commands/patterns/safe-refactor.md"
    tags: ["refactor", "cleanup", "quality"]
  
  test-first:
    description: "Write failing tests then implement"
    when: "New behavior, TDD approach"
    file: ".claude/commands/patterns/test-first.md"
    tags: ["testing", "tdd", "quality"]

  # Data & ML
  data-pipeline:
    description: "Build ETL or explore dataset"
    when: "Data processing or analysis needed"
    file: ".claude/commands/patterns/data-pipeline.md"
    tags: ["data", "etl", "pipeline", "eda"]
  
  sql-migration:
    description: "Safe database schema changes"
    when: "Database migration needed"
    file: ".claude/commands/patterns/sql-migration.md"
    tags: ["database", "sql", "migration"]
  
  ml-experiment:
    description: "Run reproducible ML experiments"
    when: "Testing model variations"
    file: ".claude/commands/patterns/ml-experiment.md"
    tags: ["ml", "experiment", "model"]
  
  ml-error-analysis:
    description: "Analyze model errors for insights"
    when: "Model performance plateaued"
    file: ".claude/commands/patterns/ml-error-analysis.md"
    tags: ["ml", "analysis", "debugging"]

  # Quality & Security
  security-review:
    description: "Security audit with tool assistance"
    when: "Pre-merge security check"
    file: ".claude/commands/patterns/security-review.md"
    tags: ["security", "audit", "quality"]
  
  performance-pass:
    description: "Profile and optimize performance"
    when: "Slowness detected or suspected"
    file: ".claude/commands/patterns/performance-pass.md"
    tags: ["performance", "optimization", "profiling"]

  # API & Frontend
  api-contract:
    description: "Update API spec and types"
    when: "Endpoint changes needed"
    file: ".claude/commands/patterns/api-contract.md"
    tags: ["api", "contract", "openapi"]
  
  frontend-feature:
    description: "Component-first UI development"
    when: "New UI feature needed"
    file: ".claude/commands/patterns/frontend-feature.md"
    tags: ["frontend", "ui", "component"]

  # Release & Review
  release-changelog:
    description: "Generate release notes from commits"
    when: "Preparing release"
    file: ".claude/commands/patterns/release-changelog.md"
    tags: ["release", "changelog", "documentation"]
  
  pr-self-review:
    description: "Self-review before PR submission"
    when: "Pre-PR quality check"
    file: ".claude/commands/patterns/pr-self-review.md"
    tags: ["pr", "review", "quality"]
  
  postmortem:
    description: "Document incident learnings"
    when: "After incident resolution"
    file: ".claude/commands/patterns/postmortem.md"
    tags: ["incident", "postmortem", "documentation"]

# Tool recipes for quick reference
tools:
  lint-type-test: "pnpm lint && pnpm typecheck && pnpm test -i"
  full-check: "scripts/run_checks.sh"
  search: "rg -n '<pattern>'"
  diff-size: "git diff --stat"
  sql-lint: "sqlfluff lint ."
  security-scan: "semgrep --config auto; trivy fs .; gitleaks detect"
  perf-bench: "hyperfine '<cmd>' --warmup 3"
  api-lint: "redocly lint openapi.yaml; openapi-typescript"

# Common command chains
chains:
  feature-full:
    description: "Complete feature implementation"
    steps:
      - discovery-scope
      - arch-spike
      - backend-feature
      - security-review
      - pr-self-review
  
  bug-to-fix:
    description: "Bug investigation and fix"
    steps:
      - bug-fix
      - test-first
      - pr-self-review
  
  quality-pass:
    description: "Quality improvement cycle"
    steps:
      - safe-refactor
      - performance-pass
      - security-review
      - pr-self-review
  
  data-work:
    description: "Data pipeline development"
    steps:
      - data-pipeline
      - sql-migration
      - test-first