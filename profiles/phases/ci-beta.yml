name: CI - Beta Phase

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          
      - name: Install dependencies
        run: |
          npm ci || pnpm install --frozen-lockfile
          
      - name: Lint check (strict)
        run: |
          npm run lint || pnpm lint
          npm run format:check || pnpm format:check || prettier --check .
          
      - name: Type check (strict)
        run: |
          npm run typecheck || pnpm typecheck || tsc --noEmit --strict
          
      - name: Unit tests with coverage
        run: |
          npm run test:coverage || pnpm test:coverage
          
      - name: Coverage threshold check
        run: |
          # Enforce 60% minimum coverage for Beta
          coverage=$(npm run test:coverage --silent | grep -oP 'All files.*?\K\d+' | head -1)
          if [ "$coverage" -lt 60 ]; then
            echo "::error::Coverage ${coverage}% is below 60% threshold"
            exit 1
          fi
          
      - name: Integration tests
        run: |
          npm run test:integration || pnpm test:e2e || echo "::error::Integration tests required for Beta"
          
  security-gates:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency audit (blocking)
        run: |
          npm audit --audit-level=high
          
      - name: SAST scan (blocking for critical)
        run: |
          # Install and run semgrep
          pip install semgrep
          semgrep --config=auto --error --severity=ERROR
          
      - name: Secret scan (blocking)
        run: |
          # Install gitleaks
          wget -q https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_linux_x64.tar.gz
          tar -xzf gitleaks_linux_x64.tar.gz
          ./gitleaks detect --no-banner --exit-code 1
          
      - name: Container scan
        if: hashFiles('Dockerfile') != ''
        run: |
          # Install trivy
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install trivy -y
          trivy fs --exit-code 1 --severity HIGH,CRITICAL .
          
  performance-check:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          
      - name: Install and build
        run: |
          npm ci || pnpm install --frozen-lockfile
          npm run build || pnpm build
          
      - name: Bundle size check
        run: |
          # Check bundle size hasn't regressed
          npx bundlesize || echo "::warning::Bundle size check not configured"
          
      - name: Performance budget
        run: |
          # Run basic perf tests
          if [ -f "perf/budget.json" ]; then
            npx hyperfine --export-json perf-results.json \
              'npm run start:prod' \
              --prepare 'npm run build' \
              --warmup 3
          fi
          
      - name: Lighthouse CI
        if: hashFiles('lighthouserc.json') != ''
        run: |
          npm install -g @lhci/cli
          lhci autorun
          
  api-contract:
    runs-on: ubuntu-latest
    if: hashFiles('openapi.yaml') != '' || hashFiles('swagger.json') != ''
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate OpenAPI spec
        run: |
          npx @redocly/cli lint openapi.yaml || \
          npx @apidevtools/swagger-cli validate swagger.json
          
      - name: Check breaking changes
        run: |
          echo "::warning::Breaking change detection not configured"
          # Could use openapi-diff or similar
          
  beta-gate:
    runs-on: ubuntu-latest
    needs: [quality-gates, security-gates, performance-check]
    if: always()
    
    steps:
      - name: Beta Gate Summary
        run: |
          echo "## Beta Phase Quality Gates"
          echo "âœ… Required Gates:"
          echo "  - Code quality: Lint, format, types (strict)"
          echo "  - Test coverage: â‰¥60%"
          echo "  - Integration tests: MUST PASS"
          echo "  - Security: No HIGH/CRITICAL vulnerabilities"
          echo "  - Secrets: None detected"
          echo ""
          echo "ðŸ“Š Metrics:"
          echo "  - Bundle size: Tracked"
          echo "  - Performance: Budgeted"
          echo "  - API contracts: Validated"
          echo ""
          echo "To graduate to Scale: Add load tests, 80% coverage, SLO monitoring"