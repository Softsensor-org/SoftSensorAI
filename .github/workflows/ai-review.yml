name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ai-review-${{ github.event.pull_request.number }}-${{ github.sha }}
  cancel-in-progress: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    continue-on-error: true # Non-blocking - won't fail PR
    # Only run if enabled via repository variable or has ai-review label
    if: >-
      ${{
        vars.AI_REVIEW_ENABLED == 'true' ||
        contains(join(github.event.pull_request.labels.*.name, ','), 'ai-review')
      }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full history for diff

      - name: Fetch base branch
        run: git fetch --no-tags origin ${{ github.base_ref }} --depth=1

      - name: Setup system prompt
        run: |
          mkdir -p system
          # Create minimal system prompt if not exists
          if [ ! -f system/active.md ]; then
            cat > system/active.md <<'EOF'
          You are a code reviewer. Review the following diff for:
          - Security issues (credentials, SQL injection, XSS, etc.)
          - Performance problems (n+1 queries, memory leaks, etc.)
          - Bugs (null checks, race conditions, logic errors)
          - Best practices violations
          Be concise. Focus on actionable issues only.
          EOF
          fi

      - name: Get PR diff
        run: |
          git diff origin/${{ github.base_ref }}...HEAD > pr.diff
          echo "Diff size: $(wc -l < pr.diff) lines"

      - name: AI Review (CLI-first, neutral fallback)
        id: review
        run: |
          # This workflow uses installed CLIs only - no API keys needed
          # It exits successfully even if no CLI is found (neutral)

          review_output=""
          cli_used=""

          # Function to try each CLI
          try_cli() {
            local cmd="$1"
            local name="$2"
            echo "Checking for $name CLI..."
            if command -v $cmd >/dev/null 2>&1; then
              echo "‚úì Found $name CLI"
              cli_used="$name"
              return 0
            fi
            return 1
          }

          # Try Claude
          if try_cli "claude" "Claude"; then
            review_output=$(claude --system-prompt system/active.md \
              "Review this PR diff for security, performance, and bugs. Be concise." < pr.diff 2>/dev/null || echo "")

          # Try Codex
          elif try_cli "codex" "Codex"; then
            review_output=$(codex exec --system-file system/active.md \
              --prompt "Review this PR diff for security, performance, and bugs. Be concise." \
              --input-file pr.diff 2>/dev/null || echo "")

          # Try Gemini
          elif try_cli "gemini" "Gemini"; then
            review_output=$(gemini generate --model gemini-1.5-pro-latest \
              --system-file system/active.md \
              --prompt "Review this PR diff for security, performance, and bugs. Be concise." \
              --input-file pr.diff 2>/dev/null || echo "")

          # Try Grok
          elif try_cli "grok" "Grok"; then
            review_output=$(grok chat \
              --system "$(cat system/active.md)" \
              --prompt "Review this PR diff for security, performance, and bugs. Be concise." \
              < pr.diff 2>/dev/null || echo "")

          else
            echo "‚ÑπÔ∏è No AI CLI available (claude/codex/gemini/grok)"
            echo "This is fine - AI review is optional."
            echo "To enable: install any supported CLI locally on the runner"
            exit 0  # Neutral exit - don't fail the workflow
          fi

          # Save review output
          if [ -n "$review_output" ]; then
            echo "$review_output" > review.md
            echo "cli_used=$cli_used" >> $GITHUB_OUTPUT
            echo "has_review=true" >> $GITHUB_OUTPUT
          else
            echo "No review generated"
            echo "has_review=false" >> $GITHUB_OUTPUT
          fi

      - name: Post review comment
        if: steps.review.outputs.has_review == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            const cli = '${{ steps.review.outputs.cli_used }}';

            const body = `## ü§ñ AI Review (${cli})\n\n${review}\n\n---\n*This is an automated review. Please verify suggestions before implementing.*`;

            // Check if we already commented on this SHA
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(c =>
              c.user.login === 'github-actions[bot]' &&
              c.body.includes('ü§ñ AI Review')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.review.outputs.has_review }}" == "true" ]; then
            echo "‚úÖ AI review posted using ${{ steps.review.outputs.cli_used }}"
          else
            echo "‚ÑπÔ∏è AI review skipped (no CLI available or no output)"
          fi
          echo ""
          echo "To enable AI reviews:"
          echo "1. Set AI_REVIEW_ENABLED=true in repository variables, OR"
          echo "2. Add 'ai-review' label to the PR"
          echo "3. Ensure a supported CLI is installed on the runner"
