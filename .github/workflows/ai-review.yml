name: ai-review
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]

jobs:
  review:
    if: >-
      ${{
        vars.AI_REVIEW_ENABLED == 'true' ||
        contains(join(github.event.pull_request.labels.*.name, ','), 'ai-review')
      }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    concurrency:
      group: ai-review-${{ github.event.pull_request.number }}-${{ github.sha }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Ensure base ref is available
        run: git fetch --no-tags origin ${{ github.base_ref }} --depth=1

      - name: Build prompt from PR diff (cap at 6000 lines)
        run: |
          mkdir -p artifacts
          git diff --unified=1 --minimal --no-color origin/${{ github.base_ref }}...HEAD > artifacts/pr.diff || true
          LINES=$(wc -l < artifacts/pr.diff || echo 0)
          if [ "$LINES" -gt 6000 ]; then head -n 6000 artifacts/pr.diff > artifacts/pr.head && mv artifacts/pr.head artifacts/pr.diff; fi

          # Analyze risk if tool exists
          RISK_PRELUDE=""
          if [ -f tools/diff_risk.sh ]; then
            RISK_TAGS=$(bash tools/diff_risk.sh artifacts/pr.diff tags 2>/dev/null || echo "")
            echo "Risk analysis: $RISK_TAGS"

            if [ -n "$RISK_TAGS" ]; then
              # Build risk-aware prelude based on tags
              RISK_PRELUDE="RISK: "
              if echo "$RISK_TAGS" | grep -q "level:critical"; then
                RISK_PRELUDE="${RISK_PRELUDE}â›” CRITICAL changes detected. "
              elif echo "$RISK_TAGS" | grep -q "level:high"; then
                RISK_PRELUDE="${RISK_PRELUDE}ðŸ”´ HIGH risk changes. "
              fi

              # Add specific risk warnings
              echo "$RISK_TAGS" | grep -q "risk:auth" && RISK_PRELUDE="${RISK_PRELUDE}Auth flows modified - check for bypasses. "
              echo "$RISK_TAGS" | grep -q "risk:db" && RISK_PRELUDE="${RISK_PRELUDE}Database changes - verify migrations. "
              echo "$RISK_TAGS" | grep -q "risk:payment" && RISK_PRELUDE="${RISK_PRELUDE}Payment code - audit thoroughly. "
              echo "$RISK_TAGS" | grep -q "risk:security" && RISK_PRELUDE="${RISK_PRELUDE}Security-sensitive - check vulnerabilities. "
              echo "$RISK_TAGS" | grep -q "risk:api" && RISK_PRELUDE="${RISK_PRELUDE}API changes - verify compatibility. "
            fi
          fi

          {
            [ -n "$RISK_PRELUDE" ] && echo "$RISK_PRELUDE"
            echo "ROLE: Senior code reviewer. Produce concise, file-scoped bullets with suggested changes."
            echo "HINT: If diff seems truncated, outline issues file-by-file; ask for a follow-up on specific files."
            echo "DIFF:"; cat artifacts/pr.diff
          } > artifacts/review_prompt.txt

      - name: Try CLIs (codexâ†’claudeâ†’geminiâ†’grok), neutral if absent
        id: run_cli
        env:
          AI_MODEL_CLAUDE: ${{ vars.AI_MODEL_CLAUDE || 'claude-3-7-sonnet-20250219' }}
          AI_MODEL_CODEX: ${{ vars.AI_MODEL_CODEX  || 'codex-latest' }}
          AI_MODEL_GEMINI: ${{ vars.AI_MODEL_GEMINI || 'gemini-1.5-pro-latest' }}
          AI_MODEL_GROK: ${{ vars.AI_MODEL_GROK   || 'grok-2-latest' }}
        run: |
          set -euo pipefail
          if [ ! -f tools/ai_shim.sh ]; then echo "::notice::tools/ai_shim.sh missing; skipping (neutral)."; exit 0; fi
          bash tools/ai_shim.sh --provider codex  --model "$AI_MODEL_CODEX"  --prompt-file artifacts/review_prompt.txt > artifacts/review_raw.txt 2> artifacts/review_codex.err || true
          [ -s artifacts/review_raw.txt ] || bash tools/ai_shim.sh --provider claude --model "$AI_MODEL_CLAUDE" --prompt-file artifacts/review_prompt.txt > artifacts/review_raw.txt 2> artifacts/review_claude.err || true
          [ -s artifacts/review_raw.txt ] || bash tools/ai_shim.sh --provider gemini --model "$AI_MODEL_GEMINI" --prompt-file artifacts/review_prompt.txt > artifacts/review_raw.txt 2> artifacts/review_gemini.err || true
          [ -s artifacts/review_raw.txt ] || bash tools/ai_shim.sh --provider grok   --model "$AI_MODEL_GROK"   --prompt-file artifacts/review_prompt.txt > artifacts/review_raw.txt 2> artifacts/review_grok.err   || true
          if [ -s artifacts/review_raw.txt ]; then
            echo "found_output=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::No AI CLI produced output; skipping (neutral)."
            exit 0
          fi

      - name: De-duplicate per commit
        if: steps.run_cli.outputs.found_output == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mark="<!-- ai-review:${{ github.sha }} -->"
          printf "%s\n\n%s\n" "$mark" "$(cat artifacts/review_raw.txt)" > artifacts/review_comment.md
          # If a comment with this mark already exists, skip
          if gh pr view ${{ github.event.pull_request.number }} --json comments \
               --jq '.comments[].body | select(contains("'"$mark"'"))' | grep -q .; then
            echo "::notice::Already commented for this commit; skipping."
            exit 0
          fi
          gh pr comment ${{ github.event.pull_request.number }} --body-file artifacts/review_comment.md
