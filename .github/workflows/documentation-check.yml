name: Documentation Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      strict_mode:
        type: boolean
        description: "Enable strict documentation requirements"
        required: false
        default: false

jobs:
  check-documentation:
    name: Check Documentation Requirements
    runs-on: ubuntu-latest
    # Make this check non-blocking by default
    continue-on-error: ${{ github.event_name != 'workflow_dispatch' || !inputs.strict_mode }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full history for comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Get changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA || git diff --name-only HEAD~1 HEAD)
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Count different types of changes
          CODE_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(sh|js|ts|py|yml|yaml)$' | wc -l || echo 0)
          DOC_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(md|txt|rst)$' | wc -l || echo 0)
          CONFIG_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(json|toml|ini|conf)$' | wc -l || echo 0)

          echo "code_changes=$CODE_CHANGES" >> $GITHUB_OUTPUT
          echo "doc_changes=$DOC_CHANGES" >> $GITHUB_OUTPUT
          echo "config_changes=$CONFIG_CHANGES" >> $GITHUB_OUTPUT

      - name: Check documentation requirements
        id: doc-check
        run: |
          # Run the documentation check script
          chmod +x scripts/check_documentation.sh
          ./scripts/check_documentation.sh "${{ steps.changed-files.outputs.files }}"

      - name: Generate documentation report
        if: always()
        run: |
          cat << 'EOF' > doc-report.md
          # üìö Documentation Check Report

          ## Changed Files Summary
          - **Code files changed**: ${{ steps.changed-files.outputs.code_changes }}
          - **Documentation files changed**: ${{ steps.changed-files.outputs.doc_changes }}
          - **Configuration files changed**: ${{ steps.changed-files.outputs.config_changes }}

          ## Documentation Requirements
          EOF

          # Append detailed requirements based on changes
          if [ -f .github/documentation-requirements.json ]; then
            node -e "
              const fs = require('fs');
              const requirements = JSON.parse(fs.readFileSync('.github/documentation-requirements.json', 'utf8'));
              const changedFiles = \`${{ steps.changed-files.outputs.files }}\`.split('\\n').filter(f => f);

              const report = [];
              changedFiles.forEach(file => {
                Object.keys(requirements.patterns).forEach(pattern => {
                  const regex = new RegExp(pattern);
                  if (regex.test(file)) {
                    const req = requirements.patterns[pattern];
                    report.push(\`- **\${file}**: \${req.description}\`);
                    if (req.required_docs) {
                      req.required_docs.forEach(doc => {
                        const exists = fs.existsSync(doc);
                        const emoji = exists ? '‚úÖ' : '‚ùå';
                        report.push(\`  - \${emoji} \${doc}\`);
                      });
                    }
                  }
                });
              });

              if (report.length > 0) {
                console.log('\\n### File-Specific Requirements\\n');
                console.log(report.join('\\n'));
              }
            " >> doc-report.md
          fi

          echo "" >> doc-report.md
          echo "## Recommendations" >> doc-report.md

          if [ "${{ steps.changed-files.outputs.code_changes }}" -gt 0 ] && [ "${{ steps.changed-files.outputs.doc_changes }}" -eq 0 ]; then
            echo "‚ö†Ô∏è **Warning**: Code changes detected without documentation updates." >> doc-report.md
            echo "" >> doc-report.md
            echo "Consider updating:" >> doc-report.md
            echo "- README.md if functionality changed" >> doc-report.md
            echo "- CHANGELOG.md for version history" >> doc-report.md
            echo "- Relevant guides in /docs if behavior changed" >> doc-report.md
          elif [ "${{ steps.changed-files.outputs.doc_changes }}" -gt 0 ]; then
            echo "‚úÖ **Good**: Documentation has been updated." >> doc-report.md
          fi

          echo "" >> doc-report.md
          echo "---" >> doc-report.md
          echo "*This check is advisory. To make it required, enable strict mode or add 'require-docs' label.*" >> doc-report.md

      - name: Comment PR with report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('doc-report.md', 'utf8');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üìö Documentation Check Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

      - name: Check strict mode or label
        id: strict-check
        if: github.event_name == 'pull_request'
        run: |
          # Check if PR has 'require-docs' label
          LABELS="${{ toJson(github.event.pull_request.labels.*.name) }}"
          if echo "$LABELS" | grep -q "require-docs"; then
            echo "strict=true" >> $GITHUB_OUTPUT
          else
            echo "strict=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail if strict mode and no docs
        if: |
          (github.event_name == 'workflow_dispatch' && inputs.strict_mode) ||
          (steps.strict-check.outputs.strict == 'true')
        run: |
          if [ "${{ steps.changed-files.outputs.code_changes }}" -gt 0 ] && [ "${{ steps.changed-files.outputs.doc_changes }}" -eq 0 ]; then
            echo "‚ùå Documentation is required for code changes in strict mode."
            echo "Please update relevant documentation files."
            exit 1
          fi
          echo "‚úÖ Documentation requirements satisfied."

  suggest-documentation:
    name: Suggest Documentation Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Analyze changes and suggest docs
        id: suggest
        run: |
          # This script analyzes changes and suggests documentation updates
          cat << 'EOF' > suggestions.md
          ## üìù Documentation Suggestions

          Based on your changes, consider updating these documentation files:
          EOF

          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD 2>/dev/null || echo "")

          # Suggest based on file patterns
          if echo "$CHANGED_FILES" | grep -q "^scripts/"; then
            echo "- **scripts/** changed: Update docs/README.md or relevant script documentation" >> suggestions.md
          fi

          if echo "$CHANGED_FILES" | grep -q "^.github/workflows/"; then
            echo "- **workflows/** changed: Update docs/ci.md" >> suggestions.md
          fi

          if echo "$CHANGED_FILES" | grep -q "^install/"; then
            echo "- **install/** changed: Update installation guides and README.md" >> suggestions.md
          fi

          if echo "$CHANGED_FILES" | grep -q "^templates/"; then
            echo "- **templates/** changed: Update template documentation" >> suggestions.md
          fi

          if echo "$CHANGED_FILES" | grep -E "breaking|major" > /dev/null; then
            echo "- **Breaking changes detected**: Update MIGRATION.md" >> suggestions.md
          fi

          echo "" >> suggestions.md
          echo "### Quick Documentation Commands" >> suggestions.md
          echo '```bash' >> suggestions.md
          echo "# Update changelog" >> suggestions.md
          echo "echo '- Your change description' >> CHANGELOG.md" >> suggestions.md
          echo "" >> suggestions.md
          echo "# Update version docs" >> suggestions.md
          echo "vim RELEASE_NOTES.md" >> suggestions.md
          echo "" >> suggestions.md
          echo "# Check documentation" >> suggestions.md
          echo "./scripts/check_documentation.sh" >> suggestions.md
          echo '```' >> suggestions.md

      - name: Add suggestions as PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const suggestions = fs.readFileSync('suggestions.md', 'utf8');

            // Only comment if there are actual suggestions
            if (suggestions.includes('changed:')) {
              // Check if we already commented
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const hasSuggestions = comments.some(comment =>
                comment.body.includes('üìù Documentation Suggestions')
              );

              if (!hasSuggestions) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: suggestions
                });
              }
            }

  summary:
    name: Documentation Check Summary
    runs-on: ubuntu-latest
    needs: [check-documentation]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## Documentation Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.check-documentation.result }}" == "success" ]; then
            echo "‚úÖ **Documentation check passed**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.check-documentation.result }}" == "failure" ]; then
            echo "‚ùå **Documentation check failed** (strict mode enabled)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Documentation check completed with warnings**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### How to Control This Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Make it required**: Add \`require-docs\` label to PR" >> $GITHUB_STEP_SUMMARY
          echo "- **Run strict mode**: Trigger workflow manually with strict mode enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip check**: This check is advisory by default and won't block merging" >> $GITHUB_STEP_SUMMARY
