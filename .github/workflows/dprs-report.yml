name: DPRS Report

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: dprs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dprs-report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup repository structure
        run: |
          # Ensure symlinks exist for moved config files
          [ ! -f package.json ] && [ -f config/package.json ] && ln -sf config/package.json package.json
          [ ! -f package-lock.json ] && [ -f config/package-lock.json ] && ln -sf config/package-lock.json package-lock.json

      - name: Setup Node.js (for package analysis)
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Setup Python (for coverage analysis)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install analysis tools
        run: |
          # Install jq for JSON processing
          sudo apt-get update
          sudo apt-get install -y jq

          # Install coverage tools if Python project detected
          if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            pip install coverage
          fi

      - name: Run security scans for DPRS input
        continue-on-error: true
        run: |
          # Create minimal security scan results for DPRS
          mkdir -p artifacts

          # Mock security results if actual scans not available
          # In real usage, this would use actual scan results from security workflow
          echo '{"results": []}' > semgrep-results.json
          echo '{"Results": []}' > trivy-results.json
          echo '[]' > gitleaks-results.json

          # Run basic npm audit if package.json exists
          if [ -f "package.json" ] && command -v npm >/dev/null; then
            npm audit --json > npm-audit.json 2>/dev/null || echo '{"vulnerabilities": {}}' > npm-audit.json
          fi

      - name: Generate test coverage data
        continue-on-error: true
        run: |
          # Generate coverage if possible
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm ci >/dev/null 2>&1 || true
            npm test -- --coverage >/dev/null 2>&1 || true
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt >/dev/null 2>&1 || true
            coverage run -m pytest >/dev/null 2>&1 || true
            coverage xml >/dev/null 2>&1 || true
          fi

      - name: Calculate DPRS
        id: dprs
        run: |
          # Run DPRS calculation
          bash scripts/dprs.sh --output artifacts

          # Extract key metrics for GitHub Actions
          TOTAL_SCORE=$(jq -r '.total_score' artifacts/dprs.json)
          PHASE=$(jq -r '.phase_readiness' artifacts/dprs.json)
          TESTS_SCORE=$(jq -r '.categories.tests.score' artifacts/dprs.json)
          SECURITY_SCORE=$(jq -r '.categories.security.score' artifacts/dprs.json)
          DOCS_SCORE=$(jq -r '.categories.documentation.score' artifacts/dprs.json)
          DX_SCORE=$(jq -r '.categories.developer_experience.score' artifacts/dprs.json)

          echo "total_score=$TOTAL_SCORE" >> $GITHUB_OUTPUT
          echo "phase=$PHASE" >> $GITHUB_OUTPUT
          echo "tests_score=$TESTS_SCORE" >> $GITHUB_OUTPUT
          echo "security_score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          echo "docs_score=$DOCS_SCORE" >> $GITHUB_OUTPUT
          echo "dx_score=$DX_SCORE" >> $GITHUB_OUTPUT

      - name: Generate DPRS badge
        run: |
          # Create badge based on score
          SCORE="${{ steps.dprs.outputs.total_score }}"
          PHASE="${{ steps.dprs.outputs.phase }}"

          if [ "$SCORE" -ge 90 ]; then
            COLOR="brightgreen"
            LABEL="SCALE"
          elif [ "$SCORE" -ge 75 ]; then
            COLOR="blue"
            LABEL="BETA"
          elif [ "$SCORE" -ge 60 ]; then
            COLOR="yellow"
            LABEL="MVP"
          elif [ "$SCORE" -ge 40 ]; then
            COLOR="orange"
            LABEL="POC"
          else
            COLOR="red"
            LABEL="INCEPTION"
          fi

          echo "[![DPRS](https://img.shields.io/badge/DPRS-$SCORE%2F100%20($LABEL)-$COLOR)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" > artifacts/dprs-badge.md

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('artifacts/dprs.md', 'utf8');
            const badge = fs.readFileSync('artifacts/dprs-badge.md', 'utf8');

            const score = '${{ steps.dprs.outputs.total_score }}';
            const phase = '${{ steps.dprs.outputs.phase }}';
            const testsScore = '${{ steps.dprs.outputs.tests_score }}';
            const securityScore = '${{ steps.dprs.outputs.security_score }}';
            const docsScore = '${{ steps.dprs.outputs.docs_score }}';
            const dxScore = '${{ steps.dprs.outputs.dx_score }}';

            const body = `## 📊 DevPilot Readiness Score (DPRS)

            ${badge}

            **Overall Score: ${score}/100 - Phase: ${phase}**

            | Category | Score | Status |
            |----------|-------|--------|
            | 🧪 Tests | ${testsScore}/100 | ${testsScore >= 80 ? '✅' : testsScore >= 60 ? '⚠️' : '❌'} |
            | 🔒 Security | ${securityScore}/100 | ${securityScore >= 80 ? '✅' : securityScore >= 60 ? '⚠️' : '❌'} |
            | 📚 Documentation | ${docsScore}/100 | ${docsScore >= 80 ? '✅' : docsScore >= 60 ? '⚠️' : '❌'} |
            | 🛠️ Developer Experience | ${dxScore}/100 | ${dxScore >= 80 ? '✅' : dxScore >= 60 ? '⚠️' : '❌'} |

            <details>
            <summary>📋 Full DPRS Report</summary>

            ${report}

            </details>

            ---
            *View detailed artifacts: [DPRS Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;

            // Check for existing DPRS comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(c =>
              c.user.login === 'github-actions[bot]' &&
              c.body.includes('📊 DevPilot Readiness Score')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Upload DPRS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dprs-report
          path: |
            artifacts/dprs.json
            artifacts/dprs.md
            artifacts/dprs-badge.md

      - name: Update repository stats
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # On main branch, could update README badge or stats
          echo "DPRS Score: ${{ steps.dprs.outputs.total_score }}/100 (Phase: ${{ steps.dprs.outputs.phase }})"

          # Could commit updated badge to README here
          # git config --local user.email "action@github.com"
          # git config --local user.name "GitHub Action"
          # ... update README with badge ...
          # git commit -am "docs: Update DPRS badge" || exit 0
          # git push

      - name: Set job summary
        run: |
          echo "## 📊 DevPilot Readiness Score" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Score:** ${{ steps.dprs.outputs.total_score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "**Phase:** ${{ steps.dprs.outputs.phase }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Score |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ steps.dprs.outputs.tests_score }}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ steps.dprs.outputs.security_score }}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ steps.dprs.outputs.docs_score }}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Developer Experience | ${{ steps.dprs.outputs.dx_score }}/100 |" >> $GITHUB_STEP_SUMMARY
