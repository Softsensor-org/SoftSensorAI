#!/usr/bin/env bash
# DevPilot meta-CLI: beautiful defaults for init, tickets, and review.
set -euo pipefail
# Detect if running in multi-user mode
if [[ -f "/opt/devpilot/etc/devpilot.conf" ]]; then
    # Multi-user installation detected
    source /opt/devpilot/etc/devpilot.conf
    ROOT="${DEVPILOT_ROOT:-/opt/devpilot}"
    ART="${DEVPILOT_USER_DIR:-$HOME/.devpilot}/artifacts"
    USER_MODE=true
else
    # Single-user installation
    ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
    ART="$ROOT/artifacts"
    USER_MODE=false
fi

SHIM="$ROOT/tools/ai_shim.sh"
mkdir -p "$ART"

say() { printf "%s\n" "$*"; }
have(){ command -v "$1" >/dev/null 2>&1; }

pick_cli() {
  # Prefer anthropic, then codex, gemini, grok
  for p in anthropic codex gemini grok; do
    if have "$p"; then echo "$p"; return; fi
  done
  echo ""
}

cmd_init() {
  say "‚ñ∏ Running doctor ‚Ä¶"
  if [[ -x "$ROOT/scripts/doctor.sh" ]]; then "$ROOT/scripts/doctor.sh" || true; fi

  # Check for project file
  local project_file=""
  for pf in devpilot.project.yml devpilot.project.yaml .devpilot.yml .devpilot.yaml; do
    if [[ -f "$pf" ]]; then
      project_file="$pf"
      say "‚ñ∏ Found project profile: $pf"
      break
    fi
  done

  if [[ -n "$project_file" ]]; then
    say "‚ñ∏ Applying profile from $project_file ‚Ä¶"
    if [[ -x "$ROOT/scripts/apply_profile.sh" ]]; then "$ROOT/scripts/apply_profile.sh" || true; fi
  else
    say "‚ñ∏ No project file found. Using defaults (skill=l1, phase=mvp) ‚Ä¶"
    say "  üí° Tip: Create devpilot.project.yml for zero-friction setup"
    if [[ -x "$ROOT/scripts/apply_profile.sh" ]]; then "$ROOT/scripts/apply_profile.sh" --skill l1 --phase mvp || true; fi
  fi

  say "‚ñ∏ Building system/active.md ‚Ä¶"
  if [[ -x "$ROOT/scripts/system_build.sh" ]]; then "$ROOT/scripts/system_build.sh" || true; fi
  say "‚ñ∏ Quick repo review ‚Ä¶"
  if grep -q '^repo-review:' "$ROOT/Justfile" 2>/dev/null; then just repo-review || true; fi

  # Pretty summary block
  say ""
  say "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  say "  INITIALIZATION COMPLETE"
  say "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  say ""
  say "  Project Setup"
  say "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  if [[ -n "$project_file" ]]; then
    say "  ‚úì Profile loaded from $project_file"
  else
    say "  ‚úì Default profile applied (skill=l1, phase=mvp)"
  fi
  say "  ‚úì System prompt built"
  say "  ‚úì Repository analyzed"
  say ""
  say "  Environment"
  say "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  if [[ "${USER_MODE:-false}" == "true" ]]; then
    say "  Mode         : Multi-user"
    say "  System root  : ${ROOT}"
    say "  Your artifacts: ${ART}"
  else
    say "  Mode         : Single-user"
    say "  Artifacts    : ${ART}"
  fi
  say ""
  say "  Next Steps"
  say "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  say "  1. dp tickets    ‚Üí Generate structured backlog"
  say "  2. dp review     ‚Üí Review your changes with AI"
  say "  3. just dev      ‚Üí Start development server"
  say "  4. dp palette    ‚Üí Browse all commands"
  say ""
  say "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  say ""
}

build_tickets_prompt() {
  local out="$ART/tickets_prompt.txt"
  if [[ -f "$ROOT/.claude/commands/tickets-from-code.md" ]]; then
    cat "$ROOT/.claude/commands/tickets-from-code.md" > "$out"
  else
    cat > "$out" <<'EOF'
ROLE: Senior engineer. Produce a prioritized backlog as strict JSON (see schema in docs).
SCOPE: entire repo; include security, tests, docs, observability.
OUTPUT: JSON only (no markdown), then I will convert to CSV.
EOF
  fi
  echo "$out"
}

extract_json() {
  # Pull JSON object from noisy model output
  awk 'BEGIN{in=0} /^[[:space:]]*{/ && !in {in=1} in{print}' | \
  awk 'BEGIN{c=0} {print; for(i=1;i<=length($0);i++){ch=substr($0,i,1); if(ch=="{")c++; else if(ch=="}")c--;}} END{exit c!=0}'
}

cmd_tickets() {
  local sys="$ROOT/system/active.md"
  [[ -f "$sys" ]] || { say "error: $sys not found. Run dp init."; exit 1; }
  local prompt; prompt="$(build_tickets_prompt)"
  local raw="$ART/tickets_raw.txt" json="$ART/tickets.json" csv="$ART/tickets.csv"
  : > "$raw"

  say "‚ñ∏ Generating tickets (CLI fallback: codex‚Üíclaude‚Üígemini‚Üígrok) ‚Ä¶"
  # Try providers via shim; neutral if none exist
  "$SHIM" --provider codex  --model "${AI_MODEL_CODEX:-codex-latest}"             --prompt-file "$prompt" > "$raw" 2> "$ART/tickets_codex.err"  || true
  [[ -s "$raw" ]] || "$SHIM" --provider claude --model "${AI_MODEL_CLAUDE:-claude-3-7-sonnet-20250219}" --prompt-file "$prompt" > "$raw" 2> "$ART/tickets_claude.err" || true
  [[ -s "$raw" ]] || "$SHIM" --provider gemini --model "${AI_MODEL_GEMINI:-gemini-1.5-pro-latest}"     --prompt-file "$prompt" > "$raw" 2> "$ART/tickets_gemini.err" || true
  [[ -s "$raw" ]] || "$SHIM" --provider grok   --model "${AI_MODEL_GROK:-grok-2-latest}"               --prompt-file "$prompt" > "$raw" 2> "$ART/tickets_grok.err"   || true

  if [[ ! -s "$raw" ]]; then
    say "‚ÑπÔ∏è  No AI CLI produced output. Install anthropic/codex/gemini/grok CLIs or run in CI with those CLIs."
    exit 0
  fi
  if extract_json < "$raw" > "$json"; then
    jq -r '
      .tickets[]
      | [
          .id, .title, .type, .priority, .effort,
          (.labels // [] | join("|")), (.assignee // ""),
          (.dependencies // [] | join("|")),
          (.notes // "" | gsub("[\r\n]+";" ")),
          (.acceptance_criteria // [] | join("; "))
        ] | @csv
    ' "$json" > "$csv" || true
    say "‚úÖ Wrote:"
    say "   - $json"
    [[ -s "$csv" ]] && say "   - $csv"
  else
    say "‚ö†Ô∏è  Could not find valid JSON in model output. Try a smaller scope or a different CLI."
    exit 0
  fi
}

cmd_review() {
  local sys="$ROOT/system/active.md"
  [[ -f "$sys" ]] || { say "error: $sys not found. Run dp init."; exit 1; }
  local base="${BASE_BRANCH:-main}"
  local with_preview="${1:-}"

  # Check for preview flag
  if [[ "$with_preview" == "--preview" ]]; then
    say "‚ñ∏ Review will include preview logs"
  fi

  git fetch --no-tags origin "$base" --depth=1 || true
  git diff --unified=1 --minimal --no-color "origin/$base"...HEAD > "$ART/review_diff.patch" || true
  local lines; lines=$(wc -l < "$ART/review_diff.patch" || echo 0)
  if [[ "$lines" -gt 6000 ]]; then head -n 6000 "$ART/review_diff.patch" > "$ART/review_diff.patch.head" && mv "$ART/review_diff.patch.head" "$ART/review_diff.patch"; fi

  # Analyze risk if tool exists
  local risk_tags=""
  local risk_prelude=""
  if [[ -x "$ROOT/tools/diff_risk.sh" ]]; then
    risk_tags=$("$ROOT/tools/diff_risk.sh" "origin/$base" 2>/dev/null || echo "")
    if [[ -n "$risk_tags" ]]; then
      say "Risk analysis: $risk_tags"

      # Build risk-aware prelude based on detected tags
      risk_prelude="RISK: "

      # Map simple tags to risk messages
      [[ "$risk_tags" =~ "auth" ]] && risk_prelude+="Auth flows modified - check for bypasses. "
      [[ "$risk_tags" =~ "db" ]] && risk_prelude+="Database changes - verify migrations and queries. "
      [[ "$risk_tags" =~ "infra" ]] && risk_prelude+="Infrastructure changes - review deployment impacts. "
      [[ "$risk_tags" =~ "ml" ]] && risk_prelude+="ML/AI changes - validate model behavior. "
      [[ "$risk_tags" =~ "security" ]] && risk_prelude+="Security-sensitive changes - thorough review required. "

      risk_prelude+="\n"
    else
      say "Risk analysis: No risk tags detected"
    fi
  fi

  # Collect preview logs if requested
  local preview_context=""
  if [[ "$with_preview" == "--preview" ]]; then
    say "‚ñ∏ Collecting preview logs..."
    if [[ -x "$ROOT/tools/preview_logs.sh" ]]; then
      preview_context=$("$ROOT/tools/preview_logs.sh" 200 context 2>/dev/null || echo "")
    elif docker ps -q -f "name=preview-" > /dev/null 2>&1; then
      preview_context=$(docker logs preview-app-local --tail=200 2>&1 | grep -E "(ERROR|WARN|Exception)" | tail -50 || echo "")
    fi

    if [[ -n "$preview_context" ]]; then
      say "‚ñ∏ Found preview context (errors/warnings will be included)"
    else
      say "‚ñ∏ Preview logs not found‚Äîskipping"
    fi
  fi

  {
    [[ -n "$risk_prelude" ]] && echo -e "$risk_prelude"
    echo "ROLE: Senior code reviewer. Produce concise, file-scoped bullets with suggested changes."
    if [[ -n "$preview_context" ]]; then
      echo "CONTEXT: Preview environment is running. Review logs for runtime issues."
      echo ""
      echo "=== PREVIEW LOGS ==="
      echo "$preview_context" | head -50
      echo "=== END LOGS ==="
      echo ""
    fi
    echo "HINT: If diff seems truncated, outline issues file-by-file; ask for a follow-up on specific files as needed."
    echo "DIFF:"; cat "$ART/review_diff.patch"
  } > "$ART/review_prompt.txt"

  # Generate checksum for determinism tracking
  local hash_cmd
  if command -v sha256sum >/dev/null 2>&1; then
    hash_cmd="sha256sum"
  elif command -v shasum >/dev/null 2>&1; then
    hash_cmd="shasum -a 256"
  else
    hash_cmd="md5sum"
  fi
  $hash_cmd "$ART/review_prompt.txt" | cut -d' ' -f1 > "$ART/review_prompt.sha256"
  say "‚ñ∏ Review prompt built (hash: $(head -c 8 "$ART/review_prompt.sha256")...)"

  "$SHIM" --provider claude --model "${AI_MODEL_CLAUDE:-claude-3-7-sonnet-20250219}" --prompt-file "$ART/review_prompt.txt" > "$ART/review_local.txt" 2> "$ART/review_claude.err" || true
  [[ -s "$ART/review_local.txt" ]] || "$SHIM" --provider codex  --model "${AI_MODEL_CODEX:-codex-latest}"             --prompt-file "$ART/review_prompt.txt" > "$ART/review_local.txt" 2> "$ART/review_codex.err"  || true
  [[ -s "$ART/review_local.txt" ]] || "$SHIM" --provider gemini --model "${AI_MODEL_GEMINI:-gemini-1.5-pro-latest}"     --prompt-file "$ART/review_prompt.txt" > "$ART/review_local.txt" 2> "$ART/review_gemini.err" || true
  [[ -s "$ART/review_local.txt" ]] || "$SHIM" --provider grok   --model "${AI_MODEL_GROK:-grok-2-latest}"               --prompt-file "$ART/review_prompt.txt" > "$ART/review_local.txt" 2> "$ART/review_grok.err"   || true

  if [[ -s "$ART/review_local.txt" ]]; then
    say "‚úÖ Wrote: $ART/review_local.txt"
  else
    say "‚ÑπÔ∏è  No AI CLI produced output. Install an AI CLI to use dp review."
  fi
}

cmd_project() {
  # Create or show project file
  if [[ -f devpilot.project.yml ]]; then
    say "‚úì Project file exists: devpilot.project.yml"
    say ""
    say "Current settings:"
    grep -E "^  (skill|phase|primary):" devpilot.project.yml | head -5
  else
    say "Creating devpilot.project.yml with sensible defaults..."

    # Detect current project name
    local project_name
    project_name=$(basename "$PWD")

    # Create from template
    if [[ -f "$ROOT/templates/devpilot.project.yml" ]]; then
      sed "s/\${PROJECT_NAME:-MyProject}/$project_name/g" \
        "$ROOT/templates/devpilot.project.yml" > devpilot.project.yml
      say "‚úÖ Created devpilot.project.yml"
      say ""
      say "Next steps:"
      say "  1) Edit devpilot.project.yml to customize"
      say "  2) Run: dp init"
      say ""
      say "Key settings to review:"
      grep -E "^  (skill|phase|primary):" devpilot.project.yml | head -5
    else
      # Minimal fallback
      cat > devpilot.project.yml <<EOF
# DevPilot Project Profile
project:
  name: $project_name

profile:
  skill: l2          # l1=beginner, l2=intermediate, l3=expert
  phase: mvp         # poc, mvp, beta, scale
  teach_mode: false

personas:
  primary: pragmatic-coder

ci:
  gates:
    lint: required
    tests: required
    coverage: advisory
EOF
      say "‚úÖ Created minimal devpilot.project.yml"
    fi
  fi
}

cmd_palette() {
  # Interactive command palette with fzf
  local query="${1:-}"

  # Check for fzf
  if ! have fzf; then
    say "‚ö†Ô∏è  fzf not found. Install with:"
    say "  brew install fzf    # macOS"
    say "  apt install fzf     # Ubuntu/Debian"
    say ""
    say "Or use: just commands  # to view command list"
    exit 1
  fi

  # Generate command registry if needed
  local registry="$ART/commands.json"
  if [[ ! -f "$registry" ]] || [[ "$ROOT/scripts/generate_command_registry.sh" -nt "$registry" ]]; then
    say "‚ñ∏ Generating command registry..."
    if [[ -x "$ROOT/scripts/generate_command_registry.sh" ]]; then
      "$ROOT/scripts/generate_command_registry.sh" "$ART/commands.md" "$registry" >/dev/null 2>&1
    fi
  fi

  # Build command list for fzf
  local commands_file="$ART/palette_commands.txt"
  if [[ -f "$registry" ]]; then
    jq -r '.commands[] | "\(.command) :: \(.description) [\(.category)]"' "$registry" > "$commands_file"
  else
    # Fallback to basic commands
    cat > "$commands_file" <<'EOF'
dp init :: Initialize project
dp tickets :: Generate backlog
dp review :: Review code changes
dp palette :: Command palette
just dev :: Start dev server
just test :: Run tests
just lint :: Run linters
just fmt :: Format code
EOF
  fi

  # Interactive selection with fzf
  local selected
  if [[ -n "$query" ]]; then
    selected=$(fzf --query="$query" --select-1 --exit-0 < "$commands_file" \
      --prompt="DevPilot ‚ñ∏ " \
      --header="Select command (ESC to cancel)" \
      --preview-window=hidden \
      --height=40% \
      --layout=reverse \
      --border=rounded)
  else
    selected=$(fzf < "$commands_file" \
      --prompt="DevPilot ‚ñ∏ " \
      --header="Select command (ESC to cancel)" \
      --preview-window=hidden \
      --height=40% \
      --layout=reverse \
      --border=rounded)
  fi

  if [[ -n "$selected" ]]; then
    # Extract command from selection
    local cmd="${selected%% ::*}"
    say "‚ñ∏ Running: $cmd"
    say ""

    # Execute the command
    eval "$cmd"
  fi
}

cmd_setup() {
  # Smart setup: detects whether to clone or use existing repo
  local url="${1:-}"

  say "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  say "  DEVPILOT SETUP"
  say "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  say ""

  # Check if we're in a git repo
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    say "‚úì Detected existing repository: $(basename "$PWD")"
    say ""
    say "‚ñ∏ Analyzing repository..."

    # Detect project type
    local project_type=""
    [[ -f package.json ]] && project_type="${project_type}Node.js "
    [[ -f requirements.txt || -f pyproject.toml ]] && project_type="${project_type}Python "
    [[ -f go.mod ]] && project_type="${project_type}Go "
    [[ -f Cargo.toml ]] && project_type="${project_type}Rust "

    [[ -n "$project_type" ]] && say "  Project type: $project_type"

    # Check for existing DevPilot files
    local existing_files=""
    [[ -f CLAUDE.md ]] && existing_files="${existing_files}CLAUDE.md "
    [[ -f devpilot.project.yml ]] && existing_files="${existing_files}devpilot.project.yml "
    [[ -d .claude ]] && existing_files="${existing_files}.claude/ "

    if [[ -n "$existing_files" ]]; then
      say "  Existing DevPilot files: $existing_files"
      say ""
      say "‚ñ∏ Running setup with merge strategy..."
      "$ROOT/setup/existing_repo_setup.sh"
    else
      say ""
      say "‚ñ∏ Adding DevPilot configuration..."
      "$ROOT/setup/existing_repo_setup.sh"
    fi
  elif [[ -n "$url" ]]; then
    # URL provided, clone and setup
    say "‚ñ∏ Setting up new repository from: $url"
    say ""
    "$ROOT/setup/repo_wizard.sh" --url "$url"
  else
    # No repo, no URL - interactive mode
    say "No repository detected. Choose an option:"
    say ""
    say "  1) Setup current directory as new project"
    say "  2) Clone a repository and setup"
    say "  3) Exit"
    say ""
    read -p "Choice [1-3]: " -n 1 -r
    echo ""

    case "$REPLY" in
      1)
        say "‚ñ∏ Initializing current directory..."
        git init
        "$ROOT/setup/existing_repo_setup.sh"
        ;;
      2)
        say "‚ñ∏ Starting repository wizard..."
        "$ROOT/setup/repo_wizard.sh"
        ;;
      *)
        say "Setup cancelled."
        exit 0
        ;;
    esac
  fi

  say ""
  say "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  say "  SETUP COMPLETE"
  say "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  say ""
  say "  Next Steps"
  say "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  say "  1. dp init       ‚Üí Initialize project settings"
  say "  2. dp palette    ‚Üí Browse available commands"
  say "  3. dp review     ‚Üí Review your changes with AI"
  say ""
}

cmd_doctor() {
  # Run system health check or install missing tools
  if [[ "${1:-}" == "--install" || "${1:-}" == "-i" ]]; then
    cmd_doctor_install
  else
    if [[ -x "$ROOT/scripts/doctor.sh" ]]; then
      "$ROOT/scripts/doctor.sh" "$@"
    else
      say "Error: doctor.sh not found"
      exit 1
    fi
  fi
}

cmd_team_doctor() {
  # Check multi-user setup health
  echo ""
  echo "DevPilot Team Setup Check"
  echo "-------------------------"

  local all_good=true

  # Check multi-user mode
  if [[ "${USER_MODE:-false}" == "true" ]]; then
    echo "‚úì Multi-user mode active"
  else
    echo "‚úó Multi-user mode not active (single-user mode)"
    echo "  ‚Üí Run: sudo $ROOT/scripts/install_multi_user.sh"
    all_good=false
  fi

  # Check system config
  if [[ -f "/opt/devpilot/etc/devpilot.conf" ]]; then
    if [[ -r "/opt/devpilot/etc/devpilot.conf" ]]; then
      echo "‚úì System config readable: /opt/devpilot/etc/devpilot.conf"
    else
      echo "‚úó System config not readable: /opt/devpilot/etc/devpilot.conf"
      echo "  ‚Üí Check permissions: ls -la /opt/devpilot/etc/"
      all_good=false
    fi
  else
    echo "‚úó System config not found: /opt/devpilot/etc/devpilot.conf"
    echo "  ‚Üí Run multi-user installer: sudo $ROOT/scripts/install_multi_user.sh"
    all_good=false
  fi

  # Check system root
  if [[ -d "${ROOT}" ]]; then
    echo "‚úì System root valid: ${ROOT}"
  else
    echo "‚úó System root not found: ${ROOT}"
    all_good=false
  fi

  # Check user directory
  local user_dir="${DEVPILOT_USER_DIR:-$HOME/.devpilot}"
  if [[ -d "$user_dir" ]]; then
    if [[ -w "$user_dir" ]]; then
      echo "‚úì User directory writable: $user_dir"
    else
      echo "‚úó User directory not writable: $user_dir"
      echo "  ‚Üí Fix permissions: chmod 755 $user_dir"
      all_good=false
    fi
  else
    echo "‚úó User directory not found: $user_dir"
    echo "  ‚Üí Create it: mkdir -p $user_dir/{artifacts,cache,logs,config}"
    all_good=false
  fi

  # Check artifacts directory
  if [[ -d "${ART}" ]]; then
    echo "‚úì Artifacts directory exists: ${ART}"
  else
    echo "‚úó Artifacts directory not found: ${ART}"
    echo "  ‚Üí Create it: mkdir -p ${ART}/{agent,review,build}"
    all_good=false
  fi

  # Check AI CLI
  local ai_found=false
  for cli in anthropic claude openai gemini grok; do
    if command -v "$cli" >/dev/null 2>&1; then
      echo "‚úì AI CLI available: $cli"
      ai_found=true
      break
    fi
  done

  if [[ "$ai_found" == "false" ]]; then
    echo "‚úó No AI CLI found"
    echo "  ‚Üí Install one: pip install anthropic"
    echo "  ‚Üí See: $ROOT/docs/AI_CLI_INSTALL.md"
    all_good=false
  fi

  # Check Git configuration
  if git config --get user.name >/dev/null 2>&1; then
    local git_user=$(git config --get user.name)
    echo "‚úì Git configured: user.name = $git_user"
  else
    echo "‚úó Git user.name not configured"
    echo "  ‚Üí Set it: git config --global user.name 'Your Name'"
    all_good=false
  fi

  # Check SSH key for GitHub
  if [[ -f ~/.ssh/id_rsa ]] || [[ -f ~/.ssh/id_ed25519 ]]; then
    echo "‚úì SSH key exists for GitHub"
  else
    echo "‚ö† No SSH key found (optional for HTTPS)"
    echo "  ‚Üí Create one: ssh-keygen -t ed25519 -C 'your-email@example.com'"
  fi

  echo ""
  if [[ "$all_good" == "true" ]]; then
    echo "All checks passed! Ready for team development."
  else
    echo "Some checks failed. Please address the issues above."
  fi
}

cmd_doctor_install() {
  # Detect missing tools and output one-liner install commands
  echo "==> Checking for missing tools..."

  local MISSING_TOOLS=()
  has() { command -v "$1" >/dev/null 2>&1; }

  # Check core tools
  for t in git jq rg fd direnv node python3; do
    if ! has "$t"; then
      MISSING_TOOLS+=("$t")
    fi
  done

  if [ ${#MISSING_TOOLS[@]} -eq 0 ]; then
    echo "‚úÖ All core tools are installed!"
    return 0
  fi

  echo "Missing tools: ${MISSING_TOOLS[*]}"
  echo ""

  # Detect OS and package manager
  local OS_TYPE="unknown"
  local PKG_MGR="unknown"

  if [[ "$(uname -s)" == "Darwin" ]]; then
    OS_TYPE="macos"
    if has brew; then
      PKG_MGR="brew"
    fi
  elif [[ "$(uname -s)" == "Linux" ]] || [[ -n "${WSL_DISTRO_NAME:-}" ]]; then
    OS_TYPE="linux"
    if has apt-get; then
      PKG_MGR="apt"
    elif has dnf; then
      PKG_MGR="dnf"
    elif has pacman; then
      PKG_MGR="pacman"
    elif has apk; then
      PKG_MGR="apk"
    fi
  fi

  # Generate one-liner based on OS and package manager
  echo "üì¶ One-liner installation command:"
  echo ""

  if [[ "$OS_TYPE" == "macos" && "$PKG_MGR" == "brew" ]]; then
    local BREW_PKGS=()
    for tool in "${MISSING_TOOLS[@]}"; do
      case "$tool" in
        rg) BREW_PKGS+=("ripgrep") ;;
        python3) BREW_PKGS+=("python@3") ;;
        yq) BREW_PKGS+=("yq") ;;
        comby) BREW_PKGS+=("comby") ;;
        *) BREW_PKGS+=("$tool") ;;
      esac
    done
    echo "brew install ${BREW_PKGS[*]}"
  elif [[ "$PKG_MGR" == "apt" ]]; then
    local APT_CMDS=()
    local NEEDS_SUDO="sudo"
    [[ "$(id -u)" -eq 0 ]] && NEEDS_SUDO=""

    for tool in "${MISSING_TOOLS[@]}"; do
      case "$tool" in
        rg) APT_CMDS+=("&& curl -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep_14.1.0-1_amd64.deb && ${NEEDS_SUDO} dpkg -i ripgrep_14.1.0-1_amd64.deb && rm ripgrep_14.1.0-1_amd64.deb") ;;
        fd) APT_CMDS+=("&& ${NEEDS_SUDO} apt-get install -y fd-find && ${NEEDS_SUDO} ln -sf \$(which fdfind) /usr/local/bin/fd") ;;
        node) APT_CMDS+=("&& curl -fsSL https://deb.nodesource.com/setup_lts.x | ${NEEDS_SUDO} -E bash - && ${NEEDS_SUDO} apt-get install -y nodejs") ;;
        python3) APT_CMDS+=("&& ${NEEDS_SUDO} apt-get install -y python3 python3-pip python3-venv") ;;
        yq) APT_CMDS+=("&& ${NEEDS_SUDO} wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && ${NEEDS_SUDO} chmod +x /usr/local/bin/yq") ;;
        comby) APT_CMDS+=("&& bash <(curl -sL get.comby.dev)") ;;
        *) APT_CMDS+=("&& ${NEEDS_SUDO} apt-get install -y $tool") ;;
      esac
    done

    echo "${NEEDS_SUDO} apt-get update ${APT_CMDS[*]}"
  elif [[ "$PKG_MGR" == "dnf" ]]; then
    local DNF_PKGS=()
    for tool in "${MISSING_TOOLS[@]}"; do
      case "$tool" in
        rg) DNF_PKGS+=("ripgrep") ;;
        fd) DNF_PKGS+=("fd-find") ;;
        node) DNF_PKGS+=("nodejs") ;;
        *) DNF_PKGS+=("$tool") ;;
      esac
    done
    echo "sudo dnf install -y ${DNF_PKGS[*]}"
  elif [[ "$PKG_MGR" == "pacman" ]]; then
    local PACMAN_PKGS=()
    for tool in "${MISSING_TOOLS[@]}"; do
      case "$tool" in
        rg) PACMAN_PKGS+=("ripgrep") ;;
        node) PACMAN_PKGS+=("nodejs npm") ;;
        python3) PACMAN_PKGS+=("python python-pip") ;;
        *) PACMAN_PKGS+=("$tool") ;;
      esac
    done
    echo "sudo pacman -S --noconfirm ${PACMAN_PKGS[*]}"
  else
    echo "# Package manager not detected. Here are generic instructions:"
    for tool in "${MISSING_TOOLS[@]}"; do
      case "$tool" in
        git) echo "# Install git from: https://git-scm.com/downloads" ;;
        jq) echo "# Install jq from: https://jqlang.github.io/jq/download/" ;;
        rg) echo "# Install ripgrep from: https://github.com/BurntSushi/ripgrep#installation" ;;
        fd) echo "# Install fd from: https://github.com/sharkdp/fd#installation" ;;
        direnv) echo "# Install direnv from: https://direnv.net/docs/installation.html" ;;
        node) echo "# Install Node.js from: https://nodejs.org/" ;;
        python3) echo "# Install Python from: https://www.python.org/downloads/" ;;
        yq) echo "# Install yq from: https://github.com/mikefarah/yq#install" ;;
        comby) echo "# Install comby from: https://comby.dev/docs/get-started#install" ;;
      esac
    done
  fi

  echo ""
  echo "After installation, run: dp doctor"

  # WSL-specific guidance
  if [[ -n "${WSL_DISTRO_NAME:-}" ]] || ([ -f /proc/version ] && grep -qi microsoft /proc/version 2>/dev/null); then
    echo ""
    echo "ü™ü WSL Tips:"
    echo " - Store repos in Linux filesystem (/home/user/) for 10x faster I/O"
    echo " - Access from Windows: \\\\wsl$\\${WSL_DISTRO_NAME:-Ubuntu}\\home"
    echo " - Use Windows Terminal for best experience"
  fi
}

cmd_profile() {
  # Change skill level and project phase
  if [[ -x "$ROOT/scripts/apply_profile.sh" ]]; then
    "$ROOT/scripts/apply_profile.sh" "$@"
  else
    say "Error: apply_profile.sh not found"
    exit 1
  fi
}

cmd_persona() {
  # Manage AI personas
  if [[ -x "$ROOT/scripts/persona_manager.sh" ]]; then
    "$ROOT/scripts/persona_manager.sh" "$@"
  else
    say "Error: persona_manager.sh not found"
    exit 1
  fi
}

cmd_score() {
  # DevPilot Readiness Score (DPRS)
  if [[ -x "$ROOT/scripts/dprs.sh" ]]; then
    "$ROOT/scripts/dprs.sh" "$@"
  else
    say "Error: dprs.sh not found"
    exit 1
  fi
}

cmd_detect() {
  # Detect technology stack
  if [[ -x "$ROOT/scripts/detect_stack.sh" ]]; then
    "$ROOT/scripts/detect_stack.sh" "$@"
  else
    say "Error: detect_stack.sh not found"
    exit 1
  fi
}

cmd_plan() {
  # Preview setup changes (dry run)
  if [[ -x "$ROOT/scripts/repo_plan.sh" ]]; then
    "$ROOT/scripts/repo_plan.sh" "$@"
  else
    say "Error: repo_plan.sh not found"
    exit 1
  fi
}

cmd_ai() {
  # Unified AI CLI interface
  if [[ -x "$ROOT/tools/ai_shim.sh" ]]; then
    "$ROOT/tools/ai_shim.sh" "$@"
  else
    say "Error: ai_shim.sh not found"
    exit 1
  fi
}

cmd_sandbox() {
  # Sandboxed code execution
  if [[ -x "$ROOT/scripts/codex_sandbox.sh" ]]; then
    "$ROOT/scripts/codex_sandbox.sh" "$@"
  else
    say "Error: codex_sandbox.sh not found"
    exit 1
  fi
}

cmd_chain() {
  # Execute multi-step command chains
  if [[ -x "$ROOT/scripts/chain_runner.sh" ]]; then
    "$ROOT/scripts/chain_runner.sh" "$@"
  else
    say "Error: chain_runner.sh not found"
    exit 1
  fi
}

cmd_patterns() {
  # Browse and apply design patterns
  if [[ -x "$ROOT/scripts/pattern_selector.sh" ]]; then
    "$ROOT/scripts/pattern_selector.sh" "$@"
  else
    say "Error: pattern_selector.sh not found"
    exit 1
  fi
}

cmd_worktree() {
  # Git worktree management
  if [[ -x "$ROOT/tools/worktree_helper.sh" ]]; then
    "$ROOT/tools/worktree_helper.sh" "$@"
  else
    say "Error: worktree_helper.sh not found"
    exit 1
  fi
}

cmd_release_check() {
  # Release readiness assessment
  if [[ -x "$ROOT/scripts/release_ready.sh" ]]; then
    "$ROOT/scripts/release_ready.sh" "$@"
  else
    say "Error: release_ready.sh not found"
    exit 1
  fi
}

cmd_migrate() {
  # Migrate profiles
  if [[ -x "$ROOT/scripts/profile_migrate.sh" ]]; then
    "$ROOT/scripts/profile_migrate.sh" "$@"
  else
    say "Error: profile_migrate.sh not found"
    exit 1
  fi
}

cmd_graduate() {
  # Track graduation criteria
  if [[ -x "$ROOT/scripts/graduate.sh" ]]; then
    "$ROOT/scripts/graduate.sh" "$@"
  else
    say "Error: graduate.sh not found"
    exit 1
  fi
}

cmd_agent() {
  # Agentic coding assistant
  if [[ -x "$ROOT/bin/dp-agent" ]]; then
    "$ROOT/bin/dp-agent" "$@"
  else
    say "Error: dp-agent not found"
    exit 1
  fi
}

cmd_apiize() {
  # Convert ML model to FastAPI service
  if [[ -x "$ROOT/bin/dp-apiize" ]]; then
    "$ROOT/bin/dp-apiize" "$@"
  else
    say "Error: dp-apiize not found"
    exit 1
  fi
}

cmd_help() {
  # Show quick help or full help
  if [[ "${1:-}" == "--full" ]]; then
    shift
    show_full_help
  else
    show_quick_help
  fi
}

show_quick_help() {
  cat <<'QUICK'
DevPilot Quick Start (7 essential commands):

  dp doctor              # Check system & install missing tools
  dp doctor --install    # One-liner to install all missing tools
  dp setup               # Smart setup for new or existing repo
  dp init                # Initialize with profile & AI config
  dp tickets             # Generate backlog from codebase (JSON/CSV)
  dp review              # AI review of local changes vs main
  dp agent new "task"    # Create agent task from description
  dp palette             # Interactive command browser (or alias: dpp)

First time? Run: dp doctor --install && dp setup && dp init
Need details? Run: dp help --full

Pro tip: Add to ~/.bashrc: alias dpp='dp palette'
QUICK
}

show_full_help() {
  cat <<'HELP'
DevPilot - Unified AI Development Interface

Setup & Configuration:
  dp setup [URL]       # Smart setup - detects new vs existing repo
  dp doctor            # System health check and diagnostics
  dp init              # Initialize project after setup
  dp project           # Create/show devpilot.project.yml
  dp profile           # Change skill level and project phase
  dp persona           # Manage AI personas (add/remove/show)

Analysis & Planning:
  dp score             # DevPilot Readiness Score (DPRS)
  dp detect            # Detect technology stack
  dp plan              # Preview setup changes (dry run)
  dp tickets           # Generate structured backlog from code

Development Workflow:
  dp review            # AI review of your changes
  dp review --preview  # Review with preview environment context
  dp ai                # Unified AI CLI interface
  dp agent             # Agentic coding assistant
  dp apiize            # Convert ML model to FastAPI service
  dp sandbox           # Sandboxed code execution
  dp chain             # Execute multi-step command chains
  dp patterns          # Browse and apply design patterns

Utilities:
  dp palette [query]   # Interactive command browser (requires fzf)
  dp worktree          # Git worktree management
  dp release-check     # Release readiness assessment

Examples:
  dp setup                                    # Setup current directory
  dp setup https://github.com/user/repo      # Clone and setup
  dp doctor                                   # Check system readiness
  dp init                                     # Initialize after setup
  dp palette test                             # Find test commands

Advanced (via just):
  just preview         # Start preview environment
  just preview-logs    # View preview logs
  just preview-stop    # stop preview environment
  just review-preview  # AI review with full preview context
  just palette         # interactive command palette
  just commands        # generate command registry

Env: AI_MODEL_* override model names; TIMEOUT_SECS limits long runs
HELP
}

case "${1:-}" in
  setup)  shift; cmd_setup "$@";;
  doctor) shift; cmd_doctor "$@";;
  team-doctor) shift; cmd_team_doctor "$@";;
  init)   shift; cmd_init "$@";;
  tickets)shift; cmd_tickets "$@";;
  review) shift; cmd_review "$@";;
  project)shift; cmd_project "$@";;
  palette)shift; cmd_palette "$@";;
  profile)shift; cmd_profile "$@";;
  persona)shift; cmd_persona "$@";;
  score)  shift; cmd_score "$@";;
  detect) shift; cmd_detect "$@";;
  plan)   shift; cmd_plan "$@";;
  ai)     shift; cmd_ai "$@";;
  agent)  shift; cmd_agent "$@";;
  sandbox)shift; cmd_sandbox "$@";;
  apiize) shift; cmd_apiize "$@";;
  chain)  shift; cmd_chain "$@";;
  patterns)shift; cmd_patterns "$@";;
  worktree)shift; cmd_worktree "$@";;
  release-check)shift; cmd_release_check "$@";;
  migrate)shift; cmd_migrate "$@";;
  graduate)shift; cmd_graduate "$@";;
  help)   shift; cmd_help "$@";;
  -h|--help|"")
    cmd_help "$@"
    ;;
  *) echo "unknown subcommand: $1" >&2; exit 2;;
esac
