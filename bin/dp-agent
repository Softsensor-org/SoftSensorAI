#!/usr/bin/env bash
# DevPilot Agentic Coding Assistant
set -euo pipefail

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
SHIM="$ROOT/tools/ai_shim.sh"

say() { printf "%s\n" "$*"; }

cmd_new() {
  # Create a new agent task from spec
  local spec_file="${1:-}"

  if [[ -z "$spec_file" ]]; then
    say "Usage: dp agent new <spec-file>"
    say ""
    say "Example:"
    say "  echo 'Add unit tests for user authentication' > task.md"
    say "  dp agent new task.md"
    exit 1
  fi

  if [[ ! -f "$spec_file" ]]; then
    say "Error: Spec file not found: $spec_file"
    exit 1
  fi

  # Generate plan from spec
  local spec_prompt="$ROOT/.claude/commands/agent/spec.md"
  local plan_prompt="$ROOT/.claude/commands/agent/plan.md"

  if [[ ! -f "$spec_prompt" ]] || [[ ! -f "$plan_prompt" ]]; then
    say "Error: Agent prompts not found in .claude/commands/agent/"
    exit 1
  fi

  # Create working directory
  local work_dir="$ROOT/.agent-work"
  mkdir -p "$work_dir"

  # Generate plan
  say "▸ Analyzing spec and generating plan..."
  {
    cat "$spec_prompt"
    echo ""
    echo "=== SPEC ==="
    cat "$spec_file"
  } | "$SHIM" --provider claude --model claude-3-opus-20240229 > "$work_dir/plan.md" 2>/dev/null || {
    say "Error: Failed to generate plan"
    exit 1
  }

  say "✅ Generated plan: $work_dir/plan.md"
  say ""
  say "Review the plan, then run:"
  say "  dp agent run $work_dir/plan.md"
}

cmd_run() {
  # Execute a plan in sandbox
  local plan_file="${1:-}"

  if [[ -z "$plan_file" ]]; then
    say "Usage: dp agent run <plan-file>"
    exit 1
  fi

  if [[ ! -f "$plan_file" ]]; then
    say "Error: Plan file not found: $plan_file"
    exit 1
  fi

  # Create sandbox
  say "▸ Creating sandbox environment..."
  if [[ -x "$ROOT/scripts/agent_sandbox.sh" ]]; then
    "$ROOT/scripts/agent_sandbox.sh" create || {
      say "Error: Failed to create sandbox"
      exit 1
    }
  else
    say "Error: agent_sandbox.sh not found"
    exit 1
  fi

  # Execute plan
  say "▸ Executing plan in sandbox..."
  {
    cat "$ROOT/.claude/commands/agent/plan.md"
    echo ""
    echo "=== PLAN ==="
    cat "$plan_file"
  } | "$SHIM" --provider claude --model claude-3-opus-20240229 > "$ROOT/.agent-work/execution.log" 2>&1 || {
    say "Error: Execution failed"
    exit 1
  }

  # Verify results
  say "▸ Verifying results..."
  if [[ -x "$ROOT/scripts/agent_verify.sh" ]]; then
    "$ROOT/scripts/agent_verify.sh" > "$ROOT/.agent-work/verify.json" || {
      say "Warning: Verification found issues"
    }
  fi

  say "✅ Execution complete"
  say "  Log: $ROOT/.agent-work/execution.log"
  say "  Verification: $ROOT/.agent-work/verify.json"
  say ""
  say "If satisfied, run:"
  say "  dp agent pr"
}

cmd_pr() {
  # Create PR from sandbox changes
  local title="${1:-Agent-generated changes}"

  # Check sandbox exists
  if [[ ! -d "$ROOT/../agent-sandbox" ]]; then
    say "Error: No sandbox found. Run 'dp agent run' first."
    exit 1
  fi

  # Create branch and PR
  say "▸ Creating pull request..."
  cd "$ROOT/../agent-sandbox"

  local branch="agent/$(date +%Y%m%d-%H%M%S)"
  git checkout -b "$branch"
  git add -A
  git commit -m "$title" -m "Generated by dp agent"
  git push -u origin "$branch"

  # Create PR using gh if available
  if command -v gh >/dev/null 2>&1; then
    gh pr create --title "$title" --body "Generated by dp agent" || {
      say "Created branch but failed to create PR. Create manually."
    }
  else
    say "Branch pushed. Create PR manually:"
    say "  Branch: $branch"
  fi

  # Cleanup sandbox
  say "▸ Cleaning up sandbox..."
  cd "$ROOT"
  if [[ -x "$ROOT/scripts/agent_sandbox.sh" ]]; then
    "$ROOT/scripts/agent_sandbox.sh" cleanup
  fi

  say "✅ Pull request created"
}

usage() {
  cat <<'EOF'
DevPilot Agent - Agentic Coding Assistant

Commands:
  dp agent new <spec>    # Create new task from specification
  dp agent run <plan>    # Execute plan in sandbox
  dp agent pr [title]    # Create PR from sandbox changes

Workflow:
  1. Write a task specification:
     echo "Add OAuth2 authentication" > task.md

  2. Generate execution plan:
     dp agent new task.md

  3. Review and execute plan:
     dp agent run .agent-work/plan.md

  4. Create pull request:
     dp agent pr "feat: Add OAuth2 authentication"

The agent uses:
  - Git worktrees for safe sandboxing
  - AI to plan and execute tasks
  - Verification to ensure quality
  - Clean PR creation workflow

EOF
}

# Main routing
case "${1:-}" in
  new)  shift; cmd_new "$@";;
  run)  shift; cmd_run "$@";;
  pr)   shift; cmd_pr "$@";;
  -h|--help|"")
    usage
    ;;
  *)
    say "Unknown command: $1"
    usage
    exit 1
    ;;
esac
