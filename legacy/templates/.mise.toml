# mise configuration - Unified runtime version management
# https://mise.jdx.dev/

# Global tool versions (can be overridden per-project)
[tools]
node = "lts"        # Latest LTS version of Node.js
python = "3.11"     # Stable Python version
go = "1.21"         # Go version (optional - uncomment if needed)
rust = "stable"     # Rust version (optional - uncomment if needed)
java = "21"         # Java LTS (optional - uncomment if needed)

# Environment variables
[env]
NODE_ENV = "development"
PYTHONDONTWRITEBYTECODE = "1"
PIP_REQUIRE_VIRTUALENV = "false"

# Aliases for common versions
[alias.node]
lts = "20"          # Pin to specific LTS if needed
latest = "21"       # Latest stable

[alias.python]
latest = "3.12"     # Latest stable Python
ml = "3.10"         # Version for ML/DS work (TensorFlow/PyTorch compatible)

# Project-specific settings (override in your project's .mise.toml)
[settings]
experimental = true         # Enable experimental features
verbose = false            # Set to true for debugging
asdf_compat = true        # Compatibility with .tool-versions files
legacy_version_file = true # Support .nvmrc, .python-version, etc.

# Tasks (similar to justfile but built into mise)
[tasks.setup]
description = "Install all dependencies"
run = """
#!/usr/bin/env bash
set -euo pipefail
echo "Installing dependencies..."
if [ -f package.json ]; then
  pnpm install || npm install
fi
if [ -f requirements.txt ]; then
  pip install -r requirements.txt
elif [ -f pyproject.toml ]; then
  pip install -e .
fi
echo "âœ“ Setup complete"
"""

[tasks.test]
description = "Run tests"
run = """
#!/usr/bin/env bash
set -euo pipefail
if [ -f package.json ]; then
  npm test
elif [ -f pytest.ini ] || [ -f pyproject.toml ]; then
  pytest
else
  echo "No test configuration found"
fi
"""

[tasks.lint]
description = "Run linters"
run = """
#!/usr/bin/env bash
set -euo pipefail
if [ -f package.json ]; then
  npm run lint || npx eslint .
fi
if command -v ruff >/dev/null; then
  ruff check .
elif command -v flake8 >/dev/null; then
  flake8 .
fi
"""

[tasks.format]
description = "Format code"
run = """
#!/usr/bin/env bash
set -euo pipefail
if [ -f package.json ]; then
  npx prettier --write .
fi
if command -v black >/dev/null; then
  black .
elif command -v ruff >/dev/null; then
  ruff format .
fi
"""

