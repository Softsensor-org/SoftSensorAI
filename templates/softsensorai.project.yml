# SoftSensorAI Project Profile
# Zero-friction per-repo defaults (like Xcode's scheme file, but text)
# Place this at your repo root and run: dp init or scripts/apply_profile.sh

# Project metadata
project:
  name: "${PROJECT_NAME:-MyProject}"
  description: "AI-first development with SoftSensorAI"
  version: "0.1.0"

# Development profile (auto-applied on init)
profile:
  skill: l2 # l1=beginner, l2=intermediate, l3=expert, l4=architect
  phase: mvp # poc, mvp, beta, scale
  teach_mode: false # Enable verbose explanations from AI

# AI personas to activate
personas:
  primary: pragmatic-coder # Main persona for this project
  secondary: # Additional personas to layer
    - security-reviewer # For security-focused projects
    # - data-scientist        # For ML/data projects
    # - frontend-specialist    # For UI-heavy projects

# Favorite commands (quick access via dp <alias>)
commands:
  # Built-in commands to enable
  enabled:
    - tickets-from-code # Generate backlog from codebase
    - think-deep # Deep analysis mode
    - review-security # Security-focused review

  # Custom command aliases
  aliases:
    lint: "just lint"
    test: "just test"
    ship: "just build && just deploy"
    review: "dp review"
    backlog: "dp tickets"

# CI/CD configuration
ci:
  # Quality gates (fail build if not met)
  gates:
    lint: required # required, advisory, or skip
    typecheck: required
    tests: required
    coverage: advisory # Warn but don't fail
    security: advisory

  # Thresholds
  thresholds:
    coverage: 60 # Minimum coverage percentage
    max_bundle_size: 5MB # Max build size
    lighthouse_score: 80 # Performance score
    vulnerabilities:
      critical: 0 # No critical vulns allowed
      high: 3 # Max 3 high vulns
      medium: 10 # Max 10 medium vulns

# Development environment
environment:
  # Primary runtime
  runtime: node # node, python, go, rust, etc.
  version: "lts" # Version spec or "lts"

  # Package manager
  package_manager: pnpm # npm, yarn, pnpm, pip, cargo, etc.

  # Required tools (checked by doctor)
  required_tools:
    - git
    - jq
    - docker

  # Optional tools (nice to have)
  optional_tools:
    - claude
    - gh
    - trivy

# AI behavior
ai:
  # Default model preferences
  models:
    primary: claude-3-7-sonnet-20250219
    fallback: grok-2-latest
    review: claude-3-haiku-20240307

  # Behavioral settings
  behavior:
    auto_review_prs: true # Auto-review on PR open
    suggest_tests: true # Suggest tests for new code
    explain_complex: true # Explain complex changes
    max_diff_lines: 6000 # Cap diff size for reviews

# Repository conventions
conventions:
  # Branch naming
  branches:
    main: main # or master
    develop: develop
    feature_prefix: feat/
    bugfix_prefix: fix/
    release_prefix: release/

  # Commit format
  commits:
    format: conventional # conventional, semantic, or custom
    scopes:
      - api
      - ui
      - db
      - docs
      - test

  # PR conventions
  pull_requests:
    require_issue: false # Link to issue required
    auto_assign: true # Auto-assign reviewers
    delete_on_merge: true # Delete branch after merge

# Deployment targets
deployment:
  environments:
    - name: staging
      auto_deploy: true # Deploy on push to develop
      url: "https://staging.example.com"

    - name: production
      auto_deploy: false # Manual deployment only
      url: "https://example.com"
      protection_rules:
        - require_approval
        - run_tests
        - check_security

# Custom scripts (run via dp <script>)
scripts:
  setup: |
    echo "Setting up development environment..."
    npm install
    cp .env.example .env
    echo "Ready to develop!"

  clean: |
    rm -rf node_modules dist coverage
    echo "Cleaned!"

# Feature flags
features:
  use_ai_commits: true # Generate commit messages with AI
  use_ai_pr_description: true # Generate PR descriptions
  auto_format_on_save: true # Run formatter before commit
  strict_mode: false # Enforce all conventions

# Notes for team
notes: |
  This project follows trunk-based development.
  Please read CONTRIBUTING.md before submitting PRs.
  Contact @teamlead for deployment access.
