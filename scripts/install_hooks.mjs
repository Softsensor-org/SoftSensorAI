#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Pre-commit hook content
const preCommitHook = `#!/bin/sh
# Generated by install_hooks.mjs - DO NOT EDIT
# This hook enforces scope based on active-task.json

# Run the scope guard script
node scripts/precommit_guard.mjs
exit $?
`;

async function installHooks() {
  console.log('üì¶ Installing git hooks...\n');
  
  try {
    // Ensure .git/hooks directory exists
    const gitDir = path.join(process.cwd(), '.git');
    const hooksDir = path.join(gitDir, 'hooks');
    
    // Check if we're in a git repository
    try {
      await fs.access(gitDir);
    } catch {
      console.error('‚ùå Not in a git repository');
      console.log('   Run this command from your repository root');
      process.exit(1);
    }
    
    // Create hooks directory if it doesn't exist
    await fs.mkdir(hooksDir, { recursive: true });
    
    // Write pre-commit hook
    const preCommitPath = path.join(hooksDir, 'pre-commit');
    await fs.writeFile(preCommitPath, preCommitHook);
    
    // Make hook executable (Unix-like systems)
    if (process.platform !== 'win32') {
      await fs.chmod(preCommitPath, 0o755);
    }
    
    console.log('‚úÖ Installed pre-commit hook');
    
    // Create example active-task.json if it doesn't exist
    const activeTaskPath = path.join(process.cwd(), '.softsensor', 'active-task.json');
    try {
      await fs.access(activeTaskPath);
      console.log('‚ÑπÔ∏è  active-task.json already exists');
    } catch {
      // File doesn't exist, create example
      await fs.mkdir(path.dirname(activeTaskPath), { recursive: true });
      const exampleTask = {
        contract_id: null,
        allowed_globs: [],
        forbidden_globs: []
      };
      await fs.writeFile(activeTaskPath, JSON.stringify(exampleTask, null, 2));
      console.log('‚úÖ Created example .softsensor/active-task.json');
    }
    
    console.log('\nüìù To activate scope guard, edit .softsensor/active-task.json');
    console.log('   Set contract_id and the hook will enforce its scope');
    
  } catch (error) {
    console.error('‚ùå Failed to install hooks:', error.message);
    process.exit(1);
  }
}

installHooks();